
import java.util.Random;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author JSU
 */
public class TicTacToe extends javax.swing.JFrame {

    /**
     * Creates new form TicTacToe
     */
    public TicTacToe() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DifficultySelection = new javax.swing.ButtonGroup();
        Easy = new javax.swing.JRadioButton();
        Hard = new javax.swing.JRadioButton();
        NewGame = new javax.swing.JButton();
        TopLeft = new javax.swing.JButton();
        TopMiddle = new javax.swing.JButton();
        TopRight = new javax.swing.JButton();
        MiddleLeft = new javax.swing.JButton();
        Middle = new javax.swing.JButton();
        MiddleRight = new javax.swing.JButton();
        BottomLeft = new javax.swing.JButton();
        BottomMiddle = new javax.swing.JButton();
        BottomRight = new javax.swing.JButton();
        Comments = new javax.swing.JLabel();
        XsWins = new javax.swing.JLabel();
        OsWins = new javax.swing.JLabel();
        Draws = new javax.swing.JLabel();
        XWinDisplay = new javax.swing.JLabel();
        OWinDisplay = new javax.swing.JLabel();
        DrawCountDisplay = new javax.swing.JLabel();
        CommentDisplay = new javax.swing.JLabel();
        INSTRUCTIONS = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DifficultySelection.add(Easy);
        Easy.setText("Easy Mode");
        Easy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EasyActionPerformed(evt);
            }
        });

        DifficultySelection.add(Hard);
        Hard.setText("Hard Mode");

        NewGame.setText("New Game");
        NewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewGameActionPerformed(evt);
            }
        });

        TopLeft.setMaximumSize(new java.awt.Dimension(73, 73));
        TopLeft.setMinimumSize(new java.awt.Dimension(73, 73));
        TopLeft.setPreferredSize(new java.awt.Dimension(73, 73));
        TopLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopLeftActionPerformed(evt);
            }
        });

        TopMiddle.setMaximumSize(new java.awt.Dimension(73, 73));
        TopMiddle.setMinimumSize(new java.awt.Dimension(73, 73));
        TopMiddle.setPreferredSize(new java.awt.Dimension(73, 73));
        TopMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopMiddleActionPerformed(evt);
            }
        });

        TopRight.setMaximumSize(new java.awt.Dimension(73, 73));
        TopRight.setMinimumSize(new java.awt.Dimension(73, 73));
        TopRight.setPreferredSize(new java.awt.Dimension(73, 73));
        TopRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopRightActionPerformed(evt);
            }
        });

        MiddleLeft.setMaximumSize(new java.awt.Dimension(73, 73));
        MiddleLeft.setMinimumSize(new java.awt.Dimension(73, 73));
        MiddleLeft.setPreferredSize(new java.awt.Dimension(73, 73));
        MiddleLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddleLeftActionPerformed(evt);
            }
        });

        Middle.setMaximumSize(new java.awt.Dimension(73, 73));
        Middle.setMinimumSize(new java.awt.Dimension(73, 73));
        Middle.setPreferredSize(new java.awt.Dimension(73, 73));
        Middle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddleActionPerformed(evt);
            }
        });

        MiddleRight.setMaximumSize(new java.awt.Dimension(73, 73));
        MiddleRight.setMinimumSize(new java.awt.Dimension(73, 73));
        MiddleRight.setPreferredSize(new java.awt.Dimension(73, 73));
        MiddleRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddleRightActionPerformed(evt);
            }
        });

        BottomLeft.setMaximumSize(new java.awt.Dimension(73, 73));
        BottomLeft.setMinimumSize(new java.awt.Dimension(73, 73));
        BottomLeft.setPreferredSize(new java.awt.Dimension(73, 73));
        BottomLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomLeftActionPerformed(evt);
            }
        });

        BottomMiddle.setMaximumSize(new java.awt.Dimension(73, 73));
        BottomMiddle.setMinimumSize(new java.awt.Dimension(73, 73));
        BottomMiddle.setPreferredSize(new java.awt.Dimension(73, 73));
        BottomMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomMiddleActionPerformed(evt);
            }
        });

        BottomRight.setMaximumSize(new java.awt.Dimension(73, 73));
        BottomRight.setMinimumSize(new java.awt.Dimension(73, 73));
        BottomRight.setPreferredSize(new java.awt.Dimension(73, 73));
        BottomRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomRightActionPerformed(evt);
            }
        });

        Comments.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Comments.setText("COMMENTS");

        XsWins.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        XsWins.setText("X");
        XsWins.setMaximumSize(new java.awt.Dimension(73, 14));
        XsWins.setPreferredSize(new java.awt.Dimension(73, 14));

        OsWins.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OsWins.setText("O");
        OsWins.setMaximumSize(new java.awt.Dimension(73, 14));
        OsWins.setPreferredSize(new java.awt.Dimension(73, 14));

        Draws.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Draws.setText("Draw");
        Draws.setMaximumSize(new java.awt.Dimension(73, 14));
        Draws.setPreferredSize(new java.awt.Dimension(73, 14));

        XWinDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        XWinDisplay.setText("0");
        XWinDisplay.setMaximumSize(new java.awt.Dimension(73, 14));
        XWinDisplay.setPreferredSize(new java.awt.Dimension(73, 14));

        OWinDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OWinDisplay.setText("0");
        OWinDisplay.setMaximumSize(new java.awt.Dimension(73, 14));
        OWinDisplay.setPreferredSize(new java.awt.Dimension(73, 14));

        DrawCountDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DrawCountDisplay.setText("0");
        DrawCountDisplay.setMaximumSize(new java.awt.Dimension(73, 14));
        DrawCountDisplay.setPreferredSize(new java.awt.Dimension(73, 14));

        CommentDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CommentDisplay.setText(" ");

        INSTRUCTIONS.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        INSTRUCTIONS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        INSTRUCTIONS.setText("Click inside an empty box below to make your move");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NewGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Easy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Hard))
                    .addComponent(Comments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CommentDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(MiddleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(TopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BottomLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(XsWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(XWinDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Middle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MiddleRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TopMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TopRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BottomMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OsWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OWinDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DrawCountDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Draws, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BottomRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(INSTRUCTIONS, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Easy)
                    .addComponent(Hard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NewGame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(INSTRUCTIONS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TopMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TopRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MiddleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Middle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MiddleRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BottomLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BottomMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BottomRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(XsWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OsWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Draws, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(XWinDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OWinDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DrawCountDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Comments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CommentDisplay)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    int t = 1; int gc = 0; 
    int x = 0;
    int o = 0;
    int d = 0;
    int a = 0;
    String X; String O; String D; String K = "";
    String TL = ""; String L = "";
    String TM = "";
    String TR = "";
    String ML = "";
    String MM = "";
    String MR = "";
    String BL = "";
    String BM = "";
    String BR = "";
    String AI = "";
    Random generator = new Random();
    
    private boolean GameOver() {
        if ((x + o + d) > gc){
            return true;
        }else{
            return false;
        }
    }
    
    private void RandomMove() {
        int A = 0;
        while (A == 0) {
            int n = generator.nextInt(9);
            if (n == 1 && TL.equals("")) {
                TL = "O"; A = 1;
            }else if (n == 2 && TM.equals("")) {
                TM = "O"; A = 1;
            }else if (n == 3 && TR.equals("")) {
                TR = "O"; A = 1;
            }else if (n == 4 && ML.equals("")) {
                ML = "O"; A = 1;
            }else if (n == 5 && MM.equals("")) {
                MM = "O"; A = 1;
            }else if (n == 6 && MR.equals("")) {
                MR = "O"; A = 1;
            }else if (n == 7 && BL.equals("")) {
                BL = "O"; A = 1;
            }else if (n == 8 && BM.equals("")) {
                BM = "O"; A = 1;
            }else if (n == 9 && BR.equals("")) {
                BR = "O"; A = 1;
            }
        }
    }
    
    private void BtnDisplay() {
        TopLeft.setText(TL);
        TopMiddle.setText(TM);
        TopRight.setText(TR);
        MiddleLeft.setText(ML);
        Middle.setText(MM);
        MiddleRight.setText(MR);
        BottomLeft.setText(BL);
        BottomMiddle.setText(BM);
        BottomRight.setText(BR);
    }
    
    private void BtnStopper() {
        TopLeft.setEnabled(false);
        TopMiddle.setEnabled(false);
        TopRight.setEnabled(false);
        MiddleLeft.setEnabled(false);
        Middle.setEnabled(false);
        MiddleRight.setEnabled(false);
        BottomLeft.setEnabled(false);
        BottomMiddle.setEnabled(false);
        BottomRight.setEnabled(false);
    }
    
    private void EasyAI(int t) {
        if (t == 1) {
            RandomMove();
            Easy.setEnabled(false);
            Hard.setEnabled(false);
        }else if (t == 2){
            if (TL.equals("O") && TM.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("O") && TR.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("O") && MM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("O") && BR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("O") && ML.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("O") && BL.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("O") && TR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("O") && MM.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("O") && BM.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MM.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("O") && BL.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MR.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("O") && BR.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MM.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("O") && BL.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("O") && MR.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("O") && BL.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("O") && BM.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("O") && BR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("O") && BR.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("O") && BM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("O") && BR.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("O") && BR.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && TM.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("X") && TR.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("X") && MM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("X") && BR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("X") && ML.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && BL.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("X") && TR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("X") && MM.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("X") && BM.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MM.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("X") && BL.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MR.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("X") && BR.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MM.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("X") && BL.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("X") && MR.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("X") && BL.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("X") && BM.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("X") && BR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("X") && BR.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("X") && BM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("X") && BR.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("X") && BR.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else {
                RandomMove();
            }
        }else if (t == 3){
            if (TL.equals("O") && TM.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("O") && TR.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("O") && MM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("O") && BR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("O") && ML.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("O") && BL.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("O") && TR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("O") && MM.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("O") && BM.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MM.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("O") && BL.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MR.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("O") && BR.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MM.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("O") && BL.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("O") && MR.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("O") && BL.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("O") && BM.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("O") && BR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("O") && BR.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("O") && BM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("O") && BR.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("O") && BR.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && TM.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("X") && TR.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("X") && MM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("X") && BR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("X") && ML.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && BL.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("X") && TR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("X") && MM.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("X") && BM.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MM.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("X") && BL.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MR.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("X") && BR.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MM.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("X") && BL.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("X") && MR.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("X") && BL.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("X") && BM.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("X") && BR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("X") && BR.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("X") && BM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("X") && BR.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("X") && BR.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else {
                RandomMove();
            }
            WinCheck();
        }else if (t == 4){
            if (TL.equals("O") && TM.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("O") && TR.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("O") && MM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("O") && BR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("O") && ML.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("O") && BL.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("O") && TR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("O") && MM.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("O") && BM.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MM.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("O") && BL.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MR.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("O") && BR.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MM.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("O") && BL.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("O") && MR.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("O") && BL.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("O") && BM.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("O") && BR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("O") && BR.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("O") && BM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("O") && BR.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("O") && BR.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && TM.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("X") && TR.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("X") && MM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("X") && BR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("X") && ML.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && BL.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("X") && TR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("X") && MM.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("X") && BM.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MM.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("X") && BL.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MR.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("X") && BR.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MM.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("X") && BL.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("X") && MR.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("X") && BL.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("X") && BM.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("X") && BR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("X") && BR.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("X") && BM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("X") && BR.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("X") && BR.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else {
                RandomMove();
            }
            WinCheck();
        }else {
            if (DrawCheck() == true) {
                CommentDisplay.setText("DRAW");
                ScoreBoard("D");
                BtnStopper();
            }else {
                
            }
        }
    }
    
    private void HardAI(int t) {
        if (t == 1) {
            if (MM.equals("") == false) {
                int n = generator.nextInt(4);
                if (n == 1) {
                    TL = "O";
                } else if (n == 2) {
                    TR = "O";
                } else if (n == 3) {
                    BL = "O";
                } else {
                    BR = "O";
                }
            } else {
                MM = "O";
            }
            Easy.setEnabled(false);
            Hard.setEnabled(false);
        } else if (t == 2) {
            if (TL.equals("X") && TM.equals("X") && MM.equals("O")){
                TR = "O";
            }else if (TL.equals("X") && TR.equals("X") && MM.equals("O")){
                TM = "O";
            }else if (TL.equals("X") && ML.equals("X") && MM.equals("O")){
                BL = "O";
            }else if (TL.equals("X") && MM.equals("X") && TR.equals("O")){
                BR = "O";
            }else if (TL.equals("X") && MM.equals("X") && BL.equals("O")){
                BR = "O";
            }else if (TL.equals("X") && MM.equals("X") && BR.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TR = "O";
                }else {
                    BL = "O";
                }
            }else if (TL.equals("X") && MR.equals("X") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TM = "O";
                }else {
                    TR = "O";
                }
            }else if (TL.equals("X") && BL.equals("X") && MM.equals("O")){
                ML = "O";
            }else if (TL.equals("X") && BM.equals("X") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    ML = "O";
                }else {
                    BL = "O";
                }
            }else if (TL.equals("X") && BR.equals("X") && MM.equals("O")){
                int n = generator.nextInt(4);
                if (n ==1) {
                    TM = "O";
                }else if (n == 2) {
                    ML = "O";
                }else if (n == 3) {
                    MR = "O";
                }else {
                    BM = "O";
                }
            }else if (TM.equals("X") && TR.equals("X") && MM.equals("O")){
                TL = "O";
            }else if (TM.equals("X") && ML.equals("X") && MM.equals("O")){
                TL = "O";
            }else if (TM.equals("X") && MM.equals("X")){
                BM = "O";
            }else if (TM.equals("X") && MR.equals("X") && MM.equals("O")){
                TR = "O";
            }else if (TM.equals("X") && BL.equals("X") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1) {
                    TL = "O";
                }else {
                    ML = "O";
                }
            }else if (TM.equals("X") && BM.equals("X") && MM.equals("O")){
                int n = generator.nextInt(4);
                if (n == 1){
                    TL = "O";
                }else if (n == 2){
                    TR = "O";
                }else if (n == 3){
                    BL = "O";
                }else {
                    BR = "O";
                }
            }else if (TM.equals("X") && BR.equals("X") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1) {
                    TR = "O";
                }else {
                    MR = "O";
                }
            }else if (TR.equals("X") && ML.equals("X") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    TM = "O";
                }
            }else if (TR.equals("X") && MM.equals("X") && TL.equals("O")){
                BL = "O";
            }else if (TR.equals("X") && MM.equals("X") && BL.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    BR = "O";
                }
            }else if (TR.equals("X") && MM.equals("X") && BR.equals("O")){
                BL = "O";
            }else if (TR.equals("X") && MR.equals("X") && MM.equals("O")){
                BR = "O";
            }else if (TR.equals("X") && BL.equals("X") && MM.equals("O")){
                int n = generator.nextInt(4);
                if (n ==1) {
                    TM = "O";
                }else if (n == 2) {
                    ML = "O";
                }else if (n == 3) {
                    MR = "O";
                }else {
                    BM = "O";
                }
            }else if (TR.equals("X") && BM.equals("X") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    MR = "O";
                }else {
                    BR = "O";
                }
            }else if (TR.equals("X") && BR.equals("X") && MM.equals("O")){
                MR = "O";
            }else if (ML.equals("X") && MM.equals("X")){
                MR = "O";
            }else if (ML.equals("X") && MR.equals("X") && MM.equals("O")){
                int n = generator.nextInt(4);
                if (n == 1){
                    TL = "O";
                }else if (n == 2){
                    TR = "O";
                }else if (n == 3){
                    BL = "O";
                }else {
                    BR = "O";
                }
            }else if (ML.equals("X") && BL.equals("X") && MM.equals("O")){
                TL = "O";
            }else if (ML.equals("X") && BM.equals("X") && MM.equals("O")){
                BL = "O";
            }else if (ML.equals("X") && BR.equals("X") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    BL = "O";
                }else {
                    BM = "O";
                } 
            }else if (MM.equals("X") && MR.equals("X")){
                ML = "O";
            }else if (MM.equals("X") && BL.equals("X") && TR.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    BR = "O";
                }
            }else if (MM.equals("X") && BL.equals("X")){
                TR = "O";
            }else if (MM.equals("X") && BM.equals("X")){
                TM = "O";
            }else if (MM.equals("X") && BR.equals("X") && TL.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TR = "O";
                }else {
                    BL = "O";
                }
            }else if (MM.equals("X") && BR.equals("X")){
                TL = "O";
            }else if (MR.equals("X") && BL.equals("X") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    BM = "O";
                }else {
                    BR = "O";
                }
            }else if (MR.equals("X") && BM.equals("X") && MM.equals("O")){
                BR = "O";
            }else if (MR.equals("X") && BR.equals("X") && MM.equals("O")){
                TR = "O";
            }else if (BL.equals("X") && BM.equals("X") && MM.equals("O")){
                BR = "O";
            }else if (BL.equals("X") && BR.equals("X") && MM.equals("O")){
                BM = "O";
            }else {
                BL = "O";
            }
        }else if (t == 3) {
            if (TL.equals("O") && TM.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("O") && TR.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("O") && MM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("O") && BR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("O") && ML.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("O") && BL.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("O") && TR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("O") && MM.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("O") && BM.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MM.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("O") && BL.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MR.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("O") && BR.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MM.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("O") && BL.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("O") && MR.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("O") && BL.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("O") && BM.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("O") && BR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("O") && BR.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("O") && BM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("O") && BR.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("O") && BR.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && TM.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("X") && TR.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("X") && MM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("X") && BR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("X") && ML.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && BL.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("X") && TR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("X") && MM.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("X") && BM.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MM.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("X") && BL.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MR.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("X") && BR.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MM.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("X") && BL.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("X") && MR.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("X") && BL.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("X") && BM.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("X") && BR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("X") && BR.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("X") && BM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("X") && BR.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("X") && BR.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && TR.equals("X") && BM.equals("X")
                    && TM.equals("O") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    ML = "O";
                }else {
                    MR = "O";
                }
            }else if (TL.equals("X") && MM.equals("X") && MR.equals("X")
                    && ML.equals("O") && BR.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    BL = "O";
                }else {
                    BM = "O";
                }
            }else if (TL.equals("X") && MM.equals("X") && BM.equals("X")
                    && TM.equals("O") && BR.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TR = "O";
                }else {
                    MR = "O";
                }
            }else if (TL.equals("X") && MR.equals("X") && BL.equals("X")
                    && ML.equals("O") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TM = "O";
                }else {
                    BM = "O";
                }
            }else if (TL.equals("X") && MR.equals("X") && BM.equals("X")
                    && TM.equals("O") && MM.equals("O")){
                BL = "O";
            }else if (TL.equals("X") && MR.equals("X") && BM.equals("X")
                    && ML.equals("O") && MM.equals("O")){
                TR = "O";
            }else if (TM.equals("X") && ML.equals("X") && BR.equals("X")
                    && TL.equals("O") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TR = "O";
                }else {
                    BL = "O";
                }
            }else if (TM.equals("X") && ML.equals("X") && BR.equals("X")
                    && MM.equals("O") && MR.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TR = "O";
                }else {
                    BL = "O";
                }
            }else if (TM.equals("X") && ML.equals("X") && BR.equals("X")
                    && MM.equals("O") && BM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TR = "O";
                }else {
                    BL = "O";
                }
            }else if (TM.equals("X") && MM.equals("X") && BR.equals("X")
                    && TL.equals("O") && BM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    ML = "O";
                }else {
                    BL = "O";
                }
            }else if (TM.equals("X") && MR.equals("X") && BL.equals("X")
                    && TR.equals("O") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    BR = "O";
                }
            }else if (TM.equals("X") && MR.equals("X") && BL.equals("X")
                    && ML.equals("O") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    BR = "O";
                }
            }else if (TM.equals("X") && MR.equals("X") && BL.equals("X")
                    && MM.equals("O") && BM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    BR = "O";
                }
            }else if (TM.equals("X") && BL.equals("X") && BR.equals("X")
                    && MM.equals("O") && BM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    ML = "O";
                }else {
                    MR = "O";
                }
            }else if (TR.equals("X") && ML.equals("X") && MM.equals("X")
                    && MR.equals("O") && BL.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TM = "O";
                }else {
                    BM = "O";
                }
            }else if (TR.equals("X") && ML.equals("X") && BM.equals("X")
                    && TM.equals("O") && MM.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    BR = "O";
                }
            }else if (TR.equals("X") && ML.equals("X") && BM.equals("X")
                    && MM.equals("O") && MR.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    BR = "O";
                }
            }else if (TR.equals("X") && ML.equals("X") && BM.equals("X")
                    && MM.equals("O") && BL.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    BR = "O";
                }
            }else if (TR.equals("X") && ML.equals("X") && BR.equals("X")
                    && MM.equals("O") && MR.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TM = "O";
                }else {
                    BM = "O";
                }
            }else if (TR.equals("X") && MM.equals("X") && BM.equals("X")
                    && TM.equals("O") && BL.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    ML = "O";
                }
            }else if (ML.equals("X") && MM.equals("X") && BR.equals("X")
                    && TL.equals("O") && MR.equals("O")){
                int n = generator.nextInt(2);
                if (n == 1){
                    TM = "O";
                }else {
                    TR = "O";
                }
            }else {
                int n = generator.nextInt(2);
                if (n == 1){
                    TL = "O";
                }else {
                    TM = "O";
                }
            }
            
            WinCheck();
        }else if (t == 4){ //t = 4
             if (TL.equals("O") && TM.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("O") && TR.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("O") && MM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("O") && BR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("O") && ML.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("O") && BL.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("O") && TR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("O") && MM.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("O") && BM.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MM.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("O") && BL.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("O") && MR.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("O") && BR.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MM.equals("O") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("O") && MR.equals("O") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("O") && BL.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("O") && MR.equals("O") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("O") && BL.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("O") && BM.equals("O") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("O") && BR.equals("O") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("O") && BR.equals("O") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("O") && BM.equals("O") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("O") && BR.equals("O") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("O") && BR.equals("O") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && TM.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (TL.equals("X") && TR.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (TL.equals("X") && MM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TL.equals("X") && BR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TL.equals("X") && ML.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TL.equals("X") && BL.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (TM.equals("X") && TR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (TM.equals("X") && MM.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (TM.equals("X") && BM.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MM.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else if (TR.equals("X") && BL.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (TR.equals("X") && MR.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (TR.equals("X") && BR.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MM.equals("X") && MR.equals("")) {
                MR = "O"; 
            }else if (ML.equals("X") && MR.equals("X") && MM.equals("")) {
                MM = "O"; 
            }else if (ML.equals("X") && BL.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MM.equals("X") && MR.equals("X") && ML.equals("")) {
                ML = "O"; 
            }else if (MM.equals("X") && BL.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (MM.equals("X") && BM.equals("X") && TM.equals("")) {
                TM = "O"; 
            }else if (MM.equals("X") && BR.equals("X") && TL.equals("")) {
                TL = "O"; 
            }else if (MR.equals("X") && BR.equals("X") && TR.equals("")) {
                TR = "O"; 
            }else if (BL.equals("X") && BM.equals("X") && BR.equals("")) {
                BR = "O"; 
            }else if (BL.equals("X") && BR.equals("X") && BM.equals("")) {
                BM = "O"; 
            }else if (BM.equals("X") && BR.equals("X") && BL.equals("")) {
                BL = "O"; 
            }else {
                RandomMove();
            }
            WinCheck();
        }else {
            if (DrawCheck() == true) {
                CommentDisplay.setText("DRAW");
                ScoreBoard("D");
                BtnStopper();
            }else {
                
            }
        }
    }
    
    private void ScoreBoard(String z) {
        if (z.equals("X")) {
            x = x + 1;
            X = Integer.toString(x);
            XWinDisplay.setText(X);
        } else if (z.equals("O")){
            o = o + 1;
            O = Integer.toString(o);
            OWinDisplay.setText(O);
        }else {
            d = d + 1;
            D = Integer.toString(d);
            DrawCountDisplay.setText(D);
        }
    }
    
    private boolean DrawCheck() {
        if (TL.equals(TM) && TL.equals(TR)){
            return false;
        }else if (TL.equals(ML) && TL.equals(BL)){
            return false;
        }else if (TL.equals(MM) && TL.equals(BR)){
            return false;
        }else if (TM.equals(MM) && TM.equals(BM)){
            return false;
        }else if (TR.equals(MM) && TR.equals(BL)){
            return false;
        }else if (TR.equals(MR) && TR.equals(BR)){
            return false;
        }else if (ML.equals(MM) && ML.equals(MR)){
            return false;
        }else if (BL.equals(BM) && BL.equals(BR)){
            return false;
        }else {
            return true;
        }
    }
    
    private void WinCheck() {
        if (TL.equals("") == false && TL.equals(TM) && TL.equals(TR)) {
            if (TL.equals("X")) {
                CommentDisplay.setText("X wins");
                ScoreBoard("X");
            }else {
                CommentDisplay.setText("O wins");
                ScoreBoard("O");
            }
            BtnStopper();
        }else if (TL.equals("") == false && TL.equals(MM) && TL.equals(BR)) {
            if (TL.equals("X")) {
                CommentDisplay.setText("X wins");
                ScoreBoard("X");
            }else {
                CommentDisplay.setText("O wins");
                ScoreBoard("O");
            }
            BtnStopper();
        }else if (TL.equals("") == false && TL.equals(ML) && TL.equals(BL)) {
            if (TL.equals("X")) {
                CommentDisplay.setText("X wins");
                ScoreBoard("X");
            }else {
                CommentDisplay.setText("O wins");
                ScoreBoard("O");
            }
            BtnStopper();
        }else if (TM.equals("") == false && TM.equals(MM) && TM.equals(BM)){
            if (TM.equals("X")) {
                CommentDisplay.setText("X wins");
                ScoreBoard("X");
            }else {
                CommentDisplay.setText("O wins");
                ScoreBoard("O");
            }
            BtnStopper();
        }else if (TR.equals("") == false && TR.equals(MM) && TR.equals(BL)) {
            if (TR.equals("X")) {
                CommentDisplay.setText("X wins");
                ScoreBoard("X");
            }else {
                CommentDisplay.setText("O wins");
                ScoreBoard("O");
            }
            BtnStopper();
        }else if (TR.equals("") == false && TR.equals(MR) && TR.equals(BR)) {
            if (TR.equals("X")) {
                CommentDisplay.setText("X wins");
                ScoreBoard("X");
            }else {
                CommentDisplay.setText("O wins");
                ScoreBoard("O");
            }
            BtnStopper();
        }else if (ML.equals("") == false && ML.equals(MM) && ML.equals(MR)) {
            if (ML.equals("X")) {
                CommentDisplay.setText("X wins");
                ScoreBoard("X");
            }else {
                CommentDisplay.setText("O wins");
                ScoreBoard("O");
            }
            BtnStopper();
        }else if (BL.equals("") == false && BL.equals(BM) && BL.equals(BR)) {
            if (BL.equals("X")) {
                CommentDisplay.setText("X wins");
                ScoreBoard("X");
            }else {
                CommentDisplay.setText("O wins");
                ScoreBoard("O");
            }
            BtnStopper();
        }else {
            
        }
    }
    
    private void EasyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EasyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EasyActionPerformed

    private void TopLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TopLeftActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (TL.equals("")) {
                    TL = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (TL.equals("")) {
                    TL = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (TL.equals("")) {
                TL = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (TL.equals("")) {
                TL = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (TL.equals("")) {
                TL = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (TL.equals("")) {
                TL = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_TopLeftActionPerformed

    private void TopMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TopMiddleActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (TM.equals("")) {
                    TM = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (TM.equals("")) {
                    TM = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (TM.equals("")) {
                TM = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (TM.equals("")) {
                TM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (TM.equals("")) {
                TM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (TM.equals("")) {
                TM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_TopMiddleActionPerformed

    private void TopRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TopRightActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (TR.equals("")) {
                    TR = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (TR.equals("")) {
                    TR = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (TR.equals("")) {
                TR = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (TR.equals("")) {
                TR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (TR.equals("")) {
                TR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (TR.equals("")) {
                TR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_TopRightActionPerformed

    private void MiddleLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiddleLeftActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (ML.equals("")) {
                    ML = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (ML.equals("")) {
                    ML = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (ML.equals("")) {
                ML = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (ML.equals("")) {
                ML = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (ML.equals("")) {
                ML = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (ML.equals("")) {
                ML = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_MiddleLeftActionPerformed

    private void MiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiddleActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (MM.equals("")) {
                    MM = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (MM.equals("")) {
                    MM = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (MM.equals("")) {
                MM = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (MM.equals("")) {
                MM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (MM.equals("")) {
                MM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (MM.equals("")) {
                MM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_MiddleActionPerformed

    private void MiddleRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiddleRightActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (MR.equals("")) {
                    MR = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (MR.equals("")) {
                    MR = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (MR.equals("")) {
                MR = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (MR.equals("")) {
                MR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (MR.equals("")) {
                MR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (MR.equals("")) {
                MR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_MiddleRightActionPerformed

    private void BottomLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottomLeftActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (BL.equals("")) {
                    BL = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (BL.equals("")) {
                    BL = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (BL.equals("")) {
                BL = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (BL.equals("")) {
                BL = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (BL.equals("")) {
                BL = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (BL.equals("")) {
                BL = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_BottomLeftActionPerformed

    private void BottomMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottomMiddleActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (BM.equals("")) {
                    BM = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (BM.equals("")) {
                    BM = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (BM.equals("")) {
                BM = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (BM.equals("")) {
                BM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (BM.equals("")) {
                BM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (BM.equals("")) {
                BM = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_BottomMiddleActionPerformed

    private void BottomRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottomRightActionPerformed
        if (t == 1) {
            if (Easy.isSelected() == true) {
                if (BR.equals("")) {
                    BR = "X";
                    CommentDisplay.setText("");
                    EasyAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } 
            else if (Hard.isSelected() == true) {
                if (BR.equals("")) {
                    BR = "X";
                    CommentDisplay.setText("");
                    HardAI(t);
                    t = 2;
                }else {
                    CommentDisplay.setText("Illegal Move");
                }
            } else {
                CommentDisplay.setText("Please select a difficulty option");
            }
            BtnDisplay();
        }else if (t == 2) {
            if (BR.equals("")) {
                BR = "X";
                CommentDisplay.setText("");
                if (Easy.isSelected() == true) {
                    EasyAI(t);
                }else if (Hard.isSelected() == true) {
                    HardAI(t);
                }else {
                    CommentDisplay.setText("There seems to be a problem");
                }
                t = 3;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 3) {
            if (BR.equals("")) {
                BR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 4;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else if (t == 4) {
            if (BR.equals("")) {
                BR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
                t = 5;
            }else {
                CommentDisplay.setText("Illegal Move");
            }
            BtnDisplay();
        }else {
            if (BR.equals("")) {
                BR = "X";
                CommentDisplay.setText("");
                WinCheck();
                if (GameOver() == false){
                    if (Easy.isSelected() == true) {
                        EasyAI(t);
                    }else if (Hard.isSelected() == true) {
                        HardAI(t);
                    }else {
                        CommentDisplay.setText("There seems to be a problem");
                    }
                }else {
                    
                }
            }else {
                CommentDisplay.setText("Illegal Move");
            }
        }
        BtnDisplay();
    }//GEN-LAST:event_BottomRightActionPerformed

    private void NewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewGameActionPerformed
        TL = ""; gc = x + o + d;
        TM = "";
        TR = "";
        ML = "";
        MM = "";
        MR = "";
        BL = "";
        BM = "";
        BR = "";
        K = "";
        TopLeft.setText("");
        TopMiddle.setText("");
        TopRight.setText("");
        MiddleLeft.setText("");
        Middle.setText("");
        MiddleRight.setText("");
        BottomLeft.setText("");
        BottomMiddle.setText("");
        BottomRight.setText("");
        t = 1;
        CommentDisplay.setText("");
        TopLeft.setEnabled(true);
        TopMiddle.setEnabled(true);
        TopRight.setEnabled(true);
        MiddleLeft.setEnabled(true);
        Middle.setEnabled(true);
        MiddleRight.setEnabled(true);
        BottomLeft.setEnabled(true);
        BottomMiddle.setEnabled(true);
        BottomRight.setEnabled(true);
        Easy.setEnabled(true);
        Hard.setEnabled(true);
    }//GEN-LAST:event_NewGameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TicTacToe().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BottomLeft;
    private javax.swing.JButton BottomMiddle;
    private javax.swing.JButton BottomRight;
    private javax.swing.JLabel CommentDisplay;
    private javax.swing.JLabel Comments;
    private javax.swing.ButtonGroup DifficultySelection;
    private javax.swing.JLabel DrawCountDisplay;
    private javax.swing.JLabel Draws;
    private javax.swing.JRadioButton Easy;
    private javax.swing.JRadioButton Hard;
    private javax.swing.JLabel INSTRUCTIONS;
    private javax.swing.JButton Middle;
    private javax.swing.JButton MiddleLeft;
    private javax.swing.JButton MiddleRight;
    private javax.swing.JButton NewGame;
    private javax.swing.JLabel OWinDisplay;
    private javax.swing.JLabel OsWins;
    private javax.swing.JButton TopLeft;
    private javax.swing.JButton TopMiddle;
    private javax.swing.JButton TopRight;
    private javax.swing.JLabel XWinDisplay;
    private javax.swing.JLabel XsWins;
    // End of variables declaration//GEN-END:variables
}